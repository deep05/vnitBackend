#These are properties
#Sat May 29 22:32:06 IST 2021
#-------------------------------packages and locations details-----------------------------------------
package_prefix=com.vnit.api
controller_suffix=Controller
target_folder=target/output/
repo_suffix=Repo
model_suffix=Mst
#-----------------------------------Mysql server details -----------------------------------------
database=mysql
db_password=shountya
db_username=root
db_url=jdbc\:mysql\://localhost\:3306/test?useSSL\=false
#------------------------------------java data type ---------------------------------------------------------
CHARACTER=String
VARCHAR=String
LONGVARCHAR=String
NUMERIC=java.math.BigDecimal
DECIMAL=java.math.BigDecimal
BIT=boolean
TINYINT=byte
INT=Integer
BIGINT=long
REAL=float
FLOAT=double
DOUBLE=double
BINARY=byte []
VARBINARY=byte []
LONGVARBINARY=byte []
DATE=Date
TIME=java.sql.Time
DATETIME=java.sql.Timestamp
TEXT=String

#-------------------------------------------For Entity File----------------------------------------------------
import_package_entity=import javax.persistence.Column;,import javax.persistence.Entity;,import javax.persistence.GeneratedValue;,import javax.persistence.GenerationType;,import javax.persistence.Id;,import javax.persistence.Table;,import io.swagger.annotations.ApiModelProperty;,import java.util.Date;,@Entity

primarykey=@ApiModelProperty(required = false, value = \"(Primary Key)\")\n@Id\n@GeneratedValue(strategy=GenerationType.IDENTITY)

notprimarykey=@ApiModelProperty(required = true, value = \"(size = 500) (required)\")


#--------------------------------------------For Repo File-------------------------------------------------------
import_package_repo=import javax.persistence.EntityManager;,import javax.transaction.Transactional;,import org.springframework.beans.factory.annotation.Autowired;,import org.springframework.stereotype.Repository;



#---------------------------------------------For Controller File----------------------------------------------------
import_package_controller=import java.util.HashMap;,import java.util.Map;,import org.springframework.beans.factory.annotation.Autowired;,import org.springframework.http.HttpStatus;,import org.springframework.web.bind.annotation.CrossOrigin;,import org.springframework.web.bind.annotation.DeleteMapping;,import org.springframework.web.bind.annotation.GetMapping;,import org.springframework.web.bind.annotation.PathVariable;,import org.springframework.web.bind.annotation.PostMapping;,import org.springframework.web.bind.annotation.RequestBody;,import org.springframework.web.bind.annotation.ResponseStatus;,import org.springframework.web.bind.annotation.RestController;,import com.fasterxml.jackson.databind.ObjectMapper;, import com.google.gson.JsonObject;, import com.vnit.api.common.RestUtil;,import io.swagger.annotations.ApiOperation;,import io.swagger.annotations.ApiResponse;

createController= \t} catch (Exception ex) {\n\t ex.printStackTrace();\n\t}\n\n\tif (status > 0) {\n\tresponse.addProperty(\"id\", status);\n\tresponse.addProperty(\"code\", 200);\n\tresponse.addProperty(\"status\", \"Success\");\n\tresponse.addProperty(\"message\", \"Save Successfully\");\n\t} else {\n\tresponse.addProperty(\"code\", 400);\n\tresponse.addProperty(\"status\", \"Failed\");\n\t response.addProperty(\"message\", \"Unable to save\");\n\t}\n\n\treturn response.toString();\n\t

deleteController=\t} catch (Exception ex) {\n\tex.printStackTrace();\n}\n\n\tif (status > 0) {\nresponse.addProperty(\"code\", 200);\n\tresponse.addProperty(\"status\", \"Success\");\n\tresponse.addProperty(\"message\", \"Deleted Successfully\");\n\t} else {\n\tresponse.addProperty(\"code\", 400);\n\tresponse.addProperty(\"status\", \"Failed\");\n\tresponse.addProperty(\"message\", \"Unable to delete\");\n\t}\n\n\treturn response.toString();\n\t

getController=\t} catch (Exception ex) {\n\tex.printStackTrace();\n\t}\n\n\tresponse.addProperty(\"code\", 400);\n\tresponse.addProperty(\"status\", \"Failed\");\n\tresponse.addProperty(\"message\", \"Unable to get data\");\n\n\treturn response.toString();\n\t

http_status=\n\t@ResponseStatus(code = HttpStatus.OK)\n

apiresponse=\t@ApiResponse(code = 200, message = \"Returns a 200 response code if successful\")\n

jsonobject=\tJsonObject response = new JsonObject();\n\tJsonObject error = new JsonObject();\n 

#---------------------------------------------For HTML File----------------------------------------------------

confirm_delete_dialog_box=\n\t<div class="modal fade" id="confirmDeleteDialog" tabindex="-1" role="dialog" aria-labelledby="basicModal" aria-hidden="true">\n<div class="modal-dialog modal-sm">\n<div class="modal-content">\n<div class="modal-body">\n<h6>Do you really want to delete!</h6>\n</div>\n<div class="modal-footer">\n<button type="button" class="btn btn-danger" data-dismiss="modal" (click)="confirmDelete()">Confirm</button>\n<button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>\n</div>\n</div>\n</div>\n</div>\n


add_button=\n\t<div class="col-md-4">\n<label style="margin-top:18px;"></label>\n\t<div class="form-group" style="text-align: center;">\n\t<button pButton pRipple type="button" \n\t label="Add" (click)="addModelOneArray()" \n\t class="save_button p-button-success"></button>\n\t </div>\n \t</div>\n \t </div>\n</div>\n\t</fieldset>\n\t</div>\n\t</div>\n

edit_button= \n\t<td><button pButton pRipple icon="pi pi-user-edit"\nclass="p-button-rounded p-button-success"\n(click)="viewRowData(modelOneArray,i);" pTooltip="Edit"\ntooltipPosition="bottom">\n</button></td>\n


delete_button=\n\t<td><button pButton pRipple icon="pi pi-trash"\nclass="p-button-rounded p-button-warning p-mr-2" data-toggle="modal"\n(click)="deleteRowData(modelOneArray,i)" pTooltip="Delete"\ntooltipPosition="bottom">\n</button></td>\n

save_cancel_button=\n\t<div class="container-fluid  bg-white" style="position: fixed;left: -1px;bottom: 32px;">\n <div class="row" style="background-color: #e4f2ef;">\n<div class="col-lg-12 mb-2 mt-2" align="right" style="background-color: #e4f2ef;">\n<button style="margin-left: 5px;" pButton pRipple type="button" label="Save" (click)="onSave()"\nclass="cancel_button p-button-success p-ripple p-button p-component" *ngIf="searchFromFilter !== true"></button>\n<button style="margin-left: 5px;" pButton pRipple type="button" [label]="searchFromFilter === true ? 'Cancel':'Show\n All'"  (click)="onCancel()"  class="cancel_button p-button-danger p-ripple p-button p-component"></button>\n</div>\n</div>\n</div>\n</div>\n

refresh_button= \n\t<th style="margin-top: 2px; margin-left: 12px; position: absolute;" pResizableColumn>\n<button pButton pRipple icon="pi pi-refresh"\nclass="p-button-rounded p-button-primary" (click)="filters = ''; searchByFilter()"\npTooltip="Refresh"\ntooltipPosition="bottom">\n</button>\n</th>\n


#-------------------------------------------------For TS File-------------------------------------------------------

tspackage=import { Component, OnInit, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { CrudService } from 'src/app/common/services/crud.service';\nimport { ConfigService } from 'src/app/core/services/config.service';\nimport { NotificationServices } from 'src/app/core/services/notification-service.service';\nimport { credentials } from 'src/app/core/constant/credentials';\n

